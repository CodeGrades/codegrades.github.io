Python Programming - Grade 6 "Transitional" (2020)
==================================================

**This grade is valid until 30th June 2021.**

Prerequisites
-------------

Candidates should be familiar with the core concepts of Python at a basic level
as covered in the previous grades.

Grade 6 is the first of the "enhanced" group of grades where the focus is upon
refining, deepening and practicing Python programming skills. The new concepts
covered in this grade will be more abstract and several core concepts will be
revisited but in more detail.

In grade 6 candidates are required to write idiomatic Python and demonstrate
fluency and confidence in all the core concepts covered so far. Not only should
this apply to individual core concepts, but the candidate should be able to
apply or use several concepts which complement each other when addressing a
particular problem or situation.

Candidates can use whatever coding environment they are familiar and most
comfortable with. To successfully complete the pair programming task, the
candidate's coding environment **must** allow them to use a debugger.

At this stage of development we expect candidates to be using "professional"
coding editors, tooling and development environments rather than the Mu Python
code editor.

We do not accept projects presented with a block based programming environment.

Core Concepts
-------------

Candidates are expected to demonstrate knowledge and, where appropriate,
application of the following core concepts:

* `Object Orientation Inheritance and Mixins </docs/2020/grades/6/oop>`_ ~
  understands the notion and mechanics of inheritance in Python classes and is
  familiar with mixins as a form of multiple inheritance. 
* `Function Decorators </docs/2020/grades/6/decorators>`_ ~ an appreciation of
  functions as first class objects (which can be passed into and out from other
  functions), and how this facilitates the notion of a decorated function in
  Python.
* `Generator Functions </docs/2020/grades/6/generators>`_ ~ has a secure
  understanding of the ``yield`` keyword as a means of returning a result and
  pausing function execution. Is able to explain the benefits of such lazy
  evaluation.
* `Frameworks </docs/2020/grades/6/frameworks>`_ ~ demonstrates knowledge of
  various popular frameworks and modules in the Python ecosystem used to
  address various problem domains. For example, Django, Flask, Jupyter, Numpy,
  and Matplotlib are examples of such frameworks and modules popular in
  particular problem domains.
* `Project Management </docs/2020/grades/6/projects>`_ ~ is able to show how
  their project is managed in a coherent and responsible manner: their code
  is available online (perhaps via a service like GitHub), is appropriately
  organised into modules, and development follows a coherent strategy (such
  as using feature branches, merged when complete). Bugs and issues are
  tracked, triaged and there may be evidence of code review and fixing merge
  conflicts.
* `Community Development </docs/2020/grades/6/community>`_ ~ appreciates the
  important of community related assets relating to a project, such as a Code
  of Conduct, ``CONTRIBUTING``, code style documentation, and other ways of
  setting expectations for collaboration.
* `Documentation </docs/2020/grades/6/docs>`_ ~ the project's documentation is
  well organised and clearly written. If required, it may include autogenerated
  API documentation, tutorials and/or examples.

Project
-------

At this stage code mentors expect candidates to show an appreciation of
idiomatic Python. Furthermore candidates are expected to show reflection and
judgement about the way they have chosen to implement their project (why did
they choose this approach, rather than another?).

An example project at this level is the following text based "Adventure Game"::

   # Simple adventure game. 

Take note that:

* It's fun and the creator has obviously thought about the users' needs.

Pairing Task
------------

The pairing task in grade 3 may include bugs as encountered in grades 1 and 2.
However, the task is presented in such a way to encourage the candidate to
revise the code to add a new feature or capabilities and to refactor the code
so it becomes easier to read, more efficient or more idiomatic.

We also need to see evidence of competence using their coding environment of
choice. At this level we expect to see them make appropriate use of the REPL
and debugger.

The candidate could use the `Mu Python code editor <https://codewith.mu/>`_ or
a coding environment of their choice to engage with the unseen fragment of
code. The code will start with a comment describing the expected behaviour of
the script. This should be read **carefully** since it will contain details of
how the code should be enhanced.

The following is an example of the sort of script the candidate will
encounter::

    # Example

Take note that:

* The fragment is very short and simple (only thirteen lines of actual Python
  -- if you discard comments and the fact that the list is over several lines).
