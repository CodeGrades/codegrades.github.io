Python Programming - Grade 6 "Transitional" (2020)
==================================================

**This grade is valid until 30th June 2021.**

Prerequisites
-------------

Candidates should be familiar with the core concepts of Python at a basic level
as covered in the previous grades.

Grade 6 is the first of the "enhanced" group of grades where the focus is upon
refining, deepening and practicing Python programming skills. The new concepts
covered in this grade will be more abstract and several core concepts will be
revisited but in more detail.

In grade 6 candidates are required to write idiomatic Python and demonstrate
fluency and confidence in all the core concepts covered so far. Not only should
this apply to individual core concepts, but the candidate should be able to
apply or use several concepts which complement each other when addressing a
particular problem or situation.

Candidates can use whatever coding environment they are familiar and most
comfortable with. To successfully complete the pair programming task, the
candidate's coding environment **must** allow them to use a debugger.

At this stage of development we expect candidates to be using "professional"
coding editors, tooling and development environments rather than the Mu Python
code editor.

We do not accept projects presented with a block based programming environment.

Core Concepts
-------------

Candidates are expected to demonstrate knowledge and, where appropriate,
application of the following core concepts:

* `Object Orientation Inheritance and Mixins </docs/2020/grades/6/oop>`_ ~
  understands the notion and mechanics of inheritance in Python classes and is
  familiar with mixins as a form of multiple inheritance. 
* `Function Decorators </docs/2020/grades/6/decorators>`_ ~ an appreciation of
  functions as first class objects (which can be passed into and out from other
  functions), and how this facilitates the notion of a decorated function in
  Python.
* `Generator Functions </docs/2020/grades/6/generators>`_ ~ has a secure
  understanding of the ``yield`` keyword as a means of returning a result and
  pausing function execution. Is able to explain the benefits of such lazy
  evaluation.
* `Frameworks </docs/2020/grades/6/frameworks>`_ ~ demonstrates knowledge of
  various popular frameworks and modules in the Python ecosystem used to
  address various problem domains. For example, Django, Flask, Jupyter, Numpy,
  and Matplotlib are examples of such frameworks and modules popular in
  particular problem domains.
* `Project Management </docs/2020/grades/6/projects>`_ ~ is able to show how
  their project is managed in a coherent and responsible manner: their code
  is available online (perhaps via a service like GitHub), is appropriately
  organised into modules, and development follows a coherent strategy (such
  as using feature branches, merged when complete). Bugs and issues are
  tracked, triaged and there may be evidence of code review and fixing merge
  conflicts.
* `Community Development </docs/2020/grades/6/community>`_ ~ appreciates the
  important of community related assets relating to a project, such as a Code
  of Conduct, ``CONTRIBUTING``, code style documentation, and other ways of
  setting expectations for collaboration.
* `Documentation </docs/2020/grades/6/docs>`_ ~ the project's documentation is
  well organised and clearly written. If required, it may include autogenerated
  API documentation, tutorials and/or examples.

Project
-------

Code mentors are expecting to see a project of some sophistication which
addresses a non-trivial problem, requirement or group of users. The project
will require evidence of depth of research, experimentation or user testing
and will be presented in a competent and well organised manner (for instance,
the project code is hosted online somewhere, and the documentation is
both comprehensive and well written).

Candidates are expected to demontrate self reflection and self evaluation
when it comes to explaining their high level approach, as well as describe
mistakes made, resulting adjustments and lessons learned. Of course, candidates
will have no problem with a technical "deep dive" analysis of a specific aspect
of their code in order to show their thinking about the implementation details
and coding decisions made when creating the feature in question.

An example project at this level is TO BE DONE:: 

   # LINK TO PROJECT

Take note that:

* It's fun and the creator has obviously thought about the users' needs.

Pairing Task
------------

At the enhanced level of grading candidates may encounter simple / trivial bugs
as characterised by the work done in foundation grades. Furthermore, they will
still be encouraged to revise and refactor code to enhance its capabilities or
make it easier to read, more efficient or more idiomatic. However, they will be
expected to add brand new features from scratch that appropriately fit within
the multi-file code base's structure, stylistic conventions and expectations of
code quality. For instance, their solution will include, if appropriate, unit
tests, comments and documentation.

Candidates will use a professional level coding environment, of their choice,
to engage with the code. They may also use scripts, Makefiles and other project
assets needed to fulfil code quality, test coverage or documentation related
requirements.

The project will include a comment describing the expected behaviour of the new
feature. This should be read **carefully** since it will contain details of
how the code should be updated.

The following is an example of the sort of project the candidate will
encounter::

    # Example TO BE DONE

Take note that:

* COMMENTARY TO BE DONE.
